cache:
  paths:
  - node_modules/
#
stages:
  - test
  - build
  - deploy-eks
#
test_async:
  image: node:4.2.2
  stage: test
  script:
   - npm install
   - node ./specs/start.js ./specs/async.spec.js
  tags:
    - docker
#
test_db:
  image: node:4.2.2
  stage: test
  only:
    - develop
  services:
    - postgres:9.5.0
  script:
   - npm install
   - node ./specs/start.js ./specs/db-postgres.spec.js
  tags:
    - docker
#
hadolint:
  stage: test
  image: hadolint:1.0.1
  only:
    - develop
  services: 
    - docker:dind
  before_script:
  script: 
    - hadolint --config $hadolint_yaml -f json - < Dockerfile |jq --color-output
#
build:
  stage: build
  image: docker:latest
  variables:
    DOCKER_HOST: tcp://127.0.0.1:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:18.09-dind
      entrypoint: ["dockerd-entrypoint.sh", "--tls=false"]
  script: 
    - apk add bash
    - export DOCKER_HOST=tcp://127.0.0.1:2375
    - echo -n $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - |
        docker build -t $CI_REGISTRY_IMAGE/$CI_PROJECT_NAME:$CI_COMMIT_SHA \
          -t $CI_REGISTRY_IMAGE:latest .
    #
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
    - docker push "$CI_REGISTRY_IMAGE:latest"
#
deploy-eks:
  stage: deploy-eks
  image: expert360-kubectl-awscli:v1.18.6
  script:
    - apk add bash
    - mkdir ~/.aws
    - cp $CI_PROJECT_DIR.tmp/credenciales_aws ~/.aws/credentials
    #
    aws eks --region us-west-2 update-kubeconfig --name desarrollo --profile desarrollo; fi
    #
    - kubectl --record deployment/$CI_PROJECT_NAME:latest set image $CI_PROJECT_NAME=$CI_REGISTRY_IMAGE -n default
    #
    - sleep 3
    - kubectl rollout status deployment $DOCKER_IMAGE --timeout=180s -n default
    - echo "Deployment completed!"
